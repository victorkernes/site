{"version":3,"sources":["../../tests/tokenizer-tests.ts","src/entity-parser.lint-test.js","src/evented-tokenizer.lint-test.js","src/generated/html5-named-char-refs.lint-test.js","src/generated/tokenizer-states.lint-test.js","src/index.lint-test.js","src/tokenize.lint-test.js","src/tokenizer.lint-test.js","src/types.lint-test.js","src/utils.lint-test.js","tests/tokenizer-tests.lint-test.js"],"sourcesContent":["import {\n  tokenize,\n  StartTag,\n  EndTag,\n  Comment,\n  Chars,\n  Token,\n  TokenType,\n  Attribute\n} from 'simple-html-tokenizer';\n\nQUnit.module('simple-html-tokenizer - tokenizer');\n\nQUnit.test('Simple content', function(assert) {\n  let tokens = tokenize('hello');\n  assert.deepEqual(tokens, [chars('hello')]);\n});\n\nQUnit.test('A simple tag', function(assert) {\n  let tokens = tokenize('<div>');\n  assert.deepEqual(tokens, [startTag('div')]);\n});\n\nQUnit.test('A simple tag with trailing spaces', function(assert) {\n  let tokens = tokenize('<div   \\t\\n>');\n  assert.deepEqual(tokens, [startTag('div')]);\n});\n\nQUnit.test('A simple closing tag', function(assert) {\n  let tokens = tokenize('</div>');\n  assert.deepEqual(tokens, [endTag('div')]);\n});\n\nQUnit.test('A simple closing tag with trailing spaces', function(assert) {\n  let tokens = tokenize('</div   \\t\\n>');\n  assert.deepEqual(tokens, [endTag('div')]);\n});\n\nQUnit.test('A pair of hyphenated tags', function(assert) {\n  let tokens = tokenize('<x-foo></x-foo>');\n  assert.deepEqual(tokens, [startTag('x-foo'), endTag('x-foo')]);\n});\n\nQUnit.test('A tag with a single-quoted attribute', function(assert) {\n  let tokens = tokenize(\"<div id='foo'>\");\n  assert.deepEqual(tokens, [startTag('div', [['id', 'foo', true]])]);\n});\n\nQUnit.test('A tag with a double-quoted attribute', function(assert) {\n  let tokens = tokenize('<div id=\"foo\">');\n  assert.deepEqual(tokens, [startTag('div', [['id', 'foo', true]])]);\n});\n\nQUnit.test('A tag with a double-quoted empty', function(assert) {\n  let tokens = tokenize('<div id=\"\">');\n  assert.deepEqual(tokens, [startTag('div', [['id', '', true]])]);\n});\n\nQUnit.test('A tag with unquoted attribute', function(assert) {\n  let tokens = tokenize('<div id=foo>');\n  assert.deepEqual(tokens, [startTag('div', [['id', 'foo', false]])]);\n});\n\nQUnit.test('A tag with valueless attributes', function(assert) {\n  let tokens = tokenize('<div foo bar>');\n  assert.deepEqual(tokens, [\n    startTag('div', [['foo', '', false], ['bar', '', false]])\n  ]);\n});\n\nQUnit.test('Missing attribute name', function(assert) {\n  let tokens = tokenize('<div =foo>');\n  assert.deepEqual(tokens, [\n    withSyntaxError(\n      'attribute name cannot start with equals sign',\n      startTag('div', [['=foo', '', false]])\n    )\n  ]);\n});\n\nQUnit.test('Invalid character in attribute name', function(assert) {\n  let tokens = tokenize('<div \">');\n  assert.deepEqual(tokens, [\n    withSyntaxError(\n      '\" is not a valid character within attribute names',\n      startTag('div', [['\"', '', false]])\n    )\n  ]);\n});\n\nQUnit.test('A tag with multiple attributes', function(assert) {\n  let tokens = tokenize('<div id=foo class=\"bar baz\" href=\\'bat\\'>');\n  assert.deepEqual(tokens, [\n    startTag('div', [\n      ['id', 'foo', false],\n      ['class', 'bar baz', true],\n      ['href', 'bat', true]\n    ])\n  ]);\n});\n\nQUnit.test('A tag with capitalization in attributes', function(assert) {\n  let tokens = tokenize('<svg viewBox=\"0 0 0 0\">');\n  assert.deepEqual(tokens, [startTag('svg', [['viewBox', '0 0 0 0', true]])]);\n});\n\nQUnit.test('A tag with capitalization in the tag', function(assert) {\n  let tokens = tokenize('<linearGradient>');\n  assert.deepEqual(tokens, [startTag('linearGradient', [])]);\n});\n\nQUnit.test('A self-closing tag', function(assert) {\n  let tokens = tokenize('<img />');\n  assert.deepEqual(tokens, [startTag('img', [], true)]);\n});\n\nQUnit.test(\n  'A self-closing tag with valueless attributes (regression)',\n  function(assert) {\n    let tokens = tokenize('<input disabled />');\n    assert.deepEqual(tokens, [\n      startTag('input', [['disabled', '', false]], true)\n    ]);\n  }\n);\n\nQUnit.test(\n  'A self-closing tag with valueless attributes without space before closing (regression)',\n  function(assert) {\n    let tokens = tokenize('<input disabled/>');\n    assert.deepEqual(tokens, [\n      startTag('input', [['disabled', '', false]], true)\n    ]);\n  }\n);\n\nQUnit.test('A tag with a / in the middle', function(assert) {\n  let tokens = tokenize('<img / src=\"foo.png\">');\n  assert.deepEqual(tokens, [startTag('img', [['src', 'foo.png', true]])]);\n});\n\nQUnit.test('An opening and closing tag with some content', function(assert) {\n  let tokens = tokenize(\"<div id='foo' class='{{bar}} baz'>Some content</div>\");\n  assert.deepEqual(tokens, [\n    startTag('div', [['id', 'foo', true], ['class', '{{bar}} baz', true]]),\n    chars('Some content'),\n    endTag('div')\n  ]);\n});\n\nQUnit.test('A comment', function(assert) {\n  let tokens = tokenize('<!-- hello -->');\n  assert.deepEqual(tokens, [comment(' hello ')]);\n});\n\nQUnit.test('A (buggy) comment with no ending --', function(assert) {\n  let tokens = tokenize('<!-->');\n  assert.deepEqual(tokens, [comment()]);\n});\n\nQUnit.test('A comment that immediately closes', function(assert) {\n  let tokens = tokenize('<!---->');\n  assert.deepEqual(tokens, [comment()]);\n});\n\nQUnit.test('A comment that contains a -', function(assert) {\n  let tokens = tokenize('<!-- A perfectly legal - appears -->');\n  assert.deepEqual(tokens, [comment(' A perfectly legal - appears ')]);\n});\n\nQUnit.test('A (buggy) comment that contains two --', function(assert) {\n  let tokens = tokenize('<!-- A questionable -- appears -->');\n  assert.deepEqual(tokens, [comment(' A questionable -- appears ')]);\n});\n\nQUnit.test('Character references are expanded', function(assert) {\n  let tokens = tokenize(\n    '&quot;Foo &amp; Bar&quot; &lt; &#60;&#x3c; &#x3C; &LT; &NotGreaterFullEqual; &Borksnorlax; &nleqq;'\n  );\n  assert.deepEqual(tokens, [chars('\"Foo & Bar\" < << < < ≧̸ &Borksnorlax; ≦̸')]);\n\n  tokens = tokenize(\n    \"<div title='&quot;Foo &amp; Bar&quot; &blk12; &lt; &#60;&#x3c; &#x3C; &LT; &NotGreaterFullEqual; &Borksnorlax; &nleqq;'>\"\n  );\n  assert.deepEqual(tokens, [\n    startTag('div', [\n      ['title', '\"Foo & Bar\" ▒ < << < < ≧̸ &Borksnorlax; ≦̸', true]\n    ])\n  ]);\n});\n\n// https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\nQUnit.test('A newline immediately following a <pre> tag is stripped', function(assert) {\n  let tokens = tokenize(\"<pre>\\nhello</pre>\");\n  assert.deepEqual(tokens, [startTag('pre'), chars('hello'), endTag('pre')]);\n});\n\n// https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\nQUnit.test('A newline immediately following a <PRE> tag is stripped', function(assert) {\n  let tokens = tokenize(\"<PRE>\\nhello</PRE>\");\n  assert.deepEqual(tokens, [startTag('PRE'), chars('hello'), endTag('PRE')]);\n});\n\n// https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions\nQUnit.test('A newline immediately following a <textarea> tag is stripped', function(assert) {\n  let tokens = tokenize(\"<textarea>\\nhello</textarea>\");\n  assert.deepEqual(tokens, [startTag('textarea'), chars('hello'), endTag('textarea')]);\n});\n\n// https://github.com/emberjs/rfcs/blob/master/text/0311-angle-bracket-invocation.md#dynamic-invocations\nQUnit.test('An Emberish named arg invocation', function(assert) {\n  let tokens = tokenize('<@foo></@foo>');\n  assert.deepEqual(tokens, [startTag('@foo'), endTag('@foo')]);\n});\n\nQUnit.module('simple-html-tokenizer - preprocessing');\n\nQUnit.test('Carriage returns are replaced with line feeds', function(assert) {\n  let tokens = tokenize('\\r\\r\\n\\r\\r\\n\\n');\n  assert.deepEqual(tokens, [chars('\\n\\n\\n\\n\\n')]);\n});\n\nQUnit.module('simple-html-tokenizer - location info');\n\nQUnit.test('lines are counted correctly', function(assert) {\n  let tokens = tokenize('\\r\\r\\n\\r\\r\\n\\n', { loc: true });\n  assert.deepEqual(tokens, [locInfo(chars('\\n\\n\\n\\n\\n'), 1, 0, 6, 0)]);\n});\n\nQUnit.test('tokens: Chars', function(assert) {\n  let tokens = tokenize('Chars', { loc: true });\n  assert.deepEqual(tokens, [locInfo(chars('Chars'), 1, 0, 1, 5)]);\n});\n\nQUnit.test('tokens: Chars start-tag Chars', function(assert) {\n  let tokens = tokenize('Chars<div>Chars', { loc: true });\n  assert.deepEqual(tokens, [\n    locInfo(chars('Chars'), 1, 0, 1, 5),\n    locInfo(startTag('div'), 1, 5, 1, 10),\n    locInfo(chars('Chars'), 1, 10, 1, 15)\n  ]);\n});\n\nQUnit.test('tokens: start-tag start-tag', function(assert) {\n  let tokens = tokenize('<div><div>', { loc: true });\n  assert.deepEqual(tokens, [\n    locInfo(startTag('div'), 1, 0, 1, 5),\n    locInfo(startTag('div'), 1, 5, 1, 10)\n  ]);\n});\n\nQUnit.test('tokens: html char ref start-tag', function(assert) {\n  let tokens = tokenize('&gt;<div>', { loc: true });\n  assert.deepEqual(tokens, [\n    locInfo(chars('>'), 1, 0, 1, 4),\n    locInfo(startTag('div'), 1, 4, 1, 9)\n  ]);\n});\n\nQUnit.test('tokens: Chars start-tag Chars start-tag', function(assert) {\n  let tokens = tokenize('Chars\\n<div>Chars\\n<div>', {\n    loc: true\n  });\n  assert.deepEqual(tokens, [\n    locInfo(chars('Chars\\n'), 1, 0, 2, 0),\n    locInfo(startTag('div'), 2, 0, 2, 5),\n    locInfo(chars('Chars\\n'), 2, 5, 3, 0),\n    locInfo(startTag('div'), 3, 0, 3, 5)\n  ]);\n});\n\nQUnit.test('tokens: comment start-tag Chars end-tag', function(assert) {\n  let tokens = tokenize(\n    '<!-- multline\\ncomment --><div foo=bar>Chars\\n</div>',\n    { loc: true }\n  );\n  assert.deepEqual(tokens, [\n    locInfo(comment(' multline\\ncomment '), 1, 0, 2, 11),\n    locInfo(startTag('div', [['foo', 'bar', false]]), 2, 11, 2, 24),\n    locInfo(chars('Chars\\n'), 2, 24, 3, 0),\n    locInfo(endTag('div'), 3, 0, 3, 6)\n  ]);\n});\n\nfunction chars(s?: string): Chars {\n  return {\n    type: TokenType.Chars,\n    chars: s === undefined ? '' : s\n  };\n}\n\nfunction comment(s?: string): Comment {\n  return {\n    type: TokenType.Comment,\n    chars: s === undefined ? '' : s\n  };\n}\n\nfunction startTag(\n  tagName: string,\n  attributes?: Attribute[],\n  selfClosing?: boolean\n): StartTag {\n  return {\n    type: TokenType.StartTag,\n    tagName: tagName,\n    attributes: attributes === undefined ? [] : attributes,\n    selfClosing: selfClosing === undefined ? false : selfClosing\n  };\n}\n\nfunction endTag(tagName: string): EndTag {\n  return {\n    type: TokenType.EndTag,\n    tagName: tagName\n  };\n}\n\nfunction locInfo(\n  token: Token,\n  startLine: number,\n  startColumn: number,\n  endLine: number,\n  endColumn: number\n) {\n  token.loc = {\n    start: {\n      line: startLine,\n      column: startColumn\n    },\n    end: {\n      line: endLine,\n      column: endColumn\n    }\n  };\n\n  return token;\n}\n\nfunction withSyntaxError(message: string, result: Token) {\n  result.syntaxError = message;\n  return result;\n}\n","QUnit.module('TSLint - src');\nQUnit.test('src/entity-parser.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/entity-parser.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src');\nQUnit.test('src/evented-tokenizer.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/evented-tokenizer.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src/generated');\nQUnit.test('src/generated/html5-named-char-refs.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/generated/html5-named-char-refs.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src/generated');\nQUnit.test('src/generated/tokenizer-states.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/generated/tokenizer-states.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src');\nQUnit.test('src/index.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/index.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src');\nQUnit.test('src/tokenize.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/tokenize.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src');\nQUnit.test('src/tokenizer.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/tokenizer.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src');\nQUnit.test('src/types.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/types.ts should pass tslint.');\n});\n","QUnit.module('TSLint - src');\nQUnit.test('src/utils.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'src/utils.ts should pass tslint.');\n});\n","QUnit.module('TSLint - tests');\nQUnit.test('tests/tokenizer-tests.ts should pass tslint', function(assert) {\n  assert.expect(1);\n  assert.ok(true, 'tests/tokenizer-tests.ts should pass tslint.');\n});\n"],"names":["tokenize"],"mappings":"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","file":"tests.js"}